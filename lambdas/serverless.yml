# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: scrape-lambda
# app and org for use with dashboard.serverless.com

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 's3:GetObject'
        - 's3:PutObject'
      Resource: "arn:aws:s3:::paravotar/*"
    - Effect: 'Allow'
      Action:
        - 's3:ListBucket'
      Resource: "arn:aws:s3:::*"
    - Effect: 'Allow'
      Action:
        - 's3:GetObject'
        - 's3:PutObject'
        - 's3:DeleteObject'
      Resource: "arn:aws:s3:::paravotar-ballots/*"
    - Effect: 'Allow'
      Action:
        - 'sqs:SendMessage'
        - 'sqs:ReceiveMessage'
      Resource: 'arn:aws:sqs:*:*:*'

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-dotenv-plugin

custom:
  webpack:
    webpackConfig: webpack.config.js
    includeModules: true
    packager: "npm"

  serverless-offline:
    location: .webpack/service

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
  exclude:
    - node_modules/puppeteer/.local-chromium/**

functions:
  consulta:
    handler: voterStatus.consulta
    memorySize: 1536MB
    timeout: 30
    environment:
      DEBUG: true
    events:
      - http:
          path: /consulta
          method: get
  
  ballotsByTown:
    handler: getBallots.ballotsByTown
    memorySize: 1536MB
    timeout: 30
    environment:
      DEBUG: true
    events:
      - http:
          path: /ballots/ByTown
          method: get
  
  ballotsByPrecint:
    handler: getBallots.ballotsByPrecint
    memorySize: 1536MB
    timeout: 30
    environment:
      DEBUG: true
    events:
      - http:
          path: /ballots/ByPrecint
          method: get
    
  allBallots:
    handler: getBallots.allBallots
    memorySize: 1536MB
    timeout: 30
    environment:
      DEBUG: true
    events:
      - http:
          path: /ballots/all
          method: get
  
  voterCenter:
    handler: centros-de-votacion.voterCenter
    memorySize: 1536MB
    timeout: 30
    environment:
      DEBUG: true
    events:
      - http:
          path: /voterCenter
          method: get

  createBallotTask:
    handler: generateBallot.createBallotTask
    memorySize: 1536MB
    timeout: 30
    environment:
      DEBUG: true
    events:
      - http:
          path: /createBallotTask
          method: post

  getPdfUrl:
    handler: pdfUrl.getPdfUrlHandler
    memorySize: 1536MB
    timeout: 30
    environment:
      DEBUG: true
    events:
      - http:
          path: /getPdfUrl
          method: get

  generatePdf:
    handler: generateBallot.generatePdfHandler
    events:
      - sqs:
          arn: arn:aws:sqs:us-east-1:214416850928:GenerateBallotQueue
          batchSize: 1

  cleanUpPdf:
    handler: generateBallot.cleanUpPdfHandler
    events:
      - sqs:
          arn: arn:aws:sqs:us-east-1:214416850928:BallotCleanUpQueue
          batchSize: 1


#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
# resources:
#  Resources:
#    GenerateBallotQueue:
#      Type: AWS::SQS::Queue
#      Properties:
#        QueueName: "GenerateBallotQueue"
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
